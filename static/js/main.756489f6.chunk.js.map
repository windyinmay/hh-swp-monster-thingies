{"version":3,"sources":["components/cards/card.js","components/card-lists/card-list.js","components/search/search-box.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","username","email","CardList","map","SearchBox","placeholder","handleChange","type","onChange","App","useState","setMonster","input","setInput","filteredMonsters","filter","m","toLowerCase","includes","toLocaleLowerCase","useEffect","fetch","then","res","json","results","catch","err","console","error","e","target","value","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0RAIO,SAASA,EAAKC,GACnB,OACE,sBAAKC,UAAU,iBAAf,UACE,qBACEC,IAAI,UACJC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BAEL,6BAAKL,EAAMI,QAAQE,OACnB,6BAAKN,EAAMI,QAAQG,WACnB,4BAAIP,EAAMI,QAAQI,W,MCRjB,SAASC,EAAST,GACvB,OACE,qBAAKC,UAAU,YAAf,SACGD,EAAMI,QAAQM,KAAI,SAACN,GAAD,OACjB,cAACL,EAAD,CAAuBK,QAASA,GAArBA,EAAQC,S,UCLdM,EAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACvB,uBACEZ,UAAU,SACVa,KAAK,OACLF,YAAaA,EACbG,SAAUF,K,MCsBCG,MA1Bf,WAAgB,IAAD,EACiBC,mBAAS,IAD1B,mBACNb,EADM,KACGc,EADH,OAEaD,mBAAS,IAFtB,mBAENE,EAFM,KAECC,EAFD,KAMPC,EAAmBjB,EAAQkB,QAAO,SAACC,GAAD,OACtCA,EAAEjB,KAAKkB,cAAcC,SAASN,EAAMO,wBAQtC,OANAC,qBAAU,WACRC,MAAM,8CACHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAAD,OAAad,EAAWc,MAC7BC,OAAM,SAACC,GAAD,OAASC,QAAQC,MAAMF,SAGhC,qBAAKjC,UAAU,MAAf,SACE,sBAAKA,UAAU,cAAf,UACE,iDACA,cAAC,EAAD,CAAWW,YAAY,kBAAkBC,aAhB3B,SAACwB,GACnBjB,EAASiB,EAAEC,OAAOC,UAgBd,cAAC9B,EAAD,CAAUL,QAASiB,UCbZmB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.756489f6.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"./card.css\";\n\nexport function Card(props) {\n  return (\n    <div className=\"card-container\">\n      <img\n        alt=\"monster\"\n        src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\n      />\n      <h2>{props.monster.name}</h2>\n      <h5>{props.monster.username}</h5>\n      <p>{props.monster.email}</p>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Card } from \"../cards/card\";\n\nimport \"./card-list.css\";\n\nexport function CardList(props) {\n  return (\n    <div className=\"card-list\">\n      {props.monster.map((monster) => (\n        <Card key={monster.id} monster={monster} />\n      ))}\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport \"./search-box.css\";\n\nexport const SearchBox = ({ placeholder, handleChange }) => (\n  <input\n    className=\"search\"\n    type=\"text\"\n    placeholder={placeholder}\n    onChange={handleChange}\n  />\n);\n","import React, { useEffect, useState } from \"react\";\nimport { CardList } from \"./components/card-lists/card-list\";\nimport { SearchBox } from \"./components/search/search-box\";\nimport \"./App.css\";\n\nfunction App() {\n  const [monster, setMonster] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const inputChange = (e) => {\n    setInput(e.target.value);\n  };\n  const filteredMonsters = monster.filter((m) =>\n    m.name.toLowerCase().includes(input.toLocaleLowerCase())\n  );\n  useEffect(() => {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((res) => res.json())\n      .then((results) => setMonster(results))\n      .catch((err) => console.error(err));\n  });\n  return (\n    <div className=\"App\">\n      <div className=\"back-ground\">\n        <h1>Monster Rolodex</h1>\n        <SearchBox placeholder=\"Search monsters\" handleChange={inputChange} />\n        <CardList monster={filteredMonsters}></CardList>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}